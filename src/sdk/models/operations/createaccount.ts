/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class CreateAccountRequestBody extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "model" })
    @Type(() => shared.CreateUpdateAccount)
    model: shared.CreateUpdateAccount;
}

export class CreateAccountRequest extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "request, media_type=application/json" })
    requestBody: CreateAccountRequestBody;

    /**
     * The customer ID that uniquely identifies the customer in your application
     */
    @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=x-customer-id" })
    xCustomerId: string;

    /**
     * The provider name
     */
    @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=x-provider-name" })
    xProviderName: string;
}

/**
 * Account created
 */
export class CreateAccount201ApplicationJSON extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: shared.Errors })
    @Expose({ name: "errors" })
    @Type(() => shared.Errors)
    errors?: shared.Errors[];

    @SpeakeasyMetadata({ elemType: shared.Logs })
    @Expose({ name: "logs" })
    @Type(() => shared.Logs)
    logs?: shared.Logs[];

    @SpeakeasyMetadata()
    @Expose({ name: "model" })
    @Type(() => shared.Account)
    model?: shared.Account;

    @SpeakeasyMetadata({ elemType: shared.Warnings })
    @Expose({ name: "warnings" })
    @Type(() => shared.Warnings)
    warnings?: shared.Warnings[];
}

export class CreateAccountResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    contentType: string;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * Account created
     */
    @SpeakeasyMetadata()
    createAccount201ApplicationJSONObject?: CreateAccount201ApplicationJSON;
}
